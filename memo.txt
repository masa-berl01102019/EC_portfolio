アプリケーション作成に関して考慮しなければいけない点

ログ設計
  ログを取るタイミング
  ログのレベルの設定
  ログの出力形式

URL設計

共通処理のまとめ方

エラー設計
  httpリクエストエラーとバリデーションエラーは帰ってくるデータの形が違うのでフロント側での制御をどうするか？
  1. エラーの出す位置、文言、エラー時に画面上のどこのデータを見せないようにするか？ 
     ex) 認証や権限がない場合はすべて隠して見えないようにしたい
     ex) バリデーションエラーは基本的にフォーム直下にエラーを出したい

  エラー時に管理者に通知をどう行うか？

権限の設計
  現時点ではセッションで認証情報を持ってるのでadminで認証通らなければ見れない情報や出来ない操作が区分けされてるが、
  tokenで認証を管理する場合は認証さえ通ればuserでもadminでもすべてへのアクセスやデータの削除が可能なのでロールやポリシーの設定が必要
  

論理削除と物理削除の設計
    論理削除の問題点
    ・親テーブルの削除
      1.既に紐づけられたブランドを消すと商品一覧でエラーが走る
      2.エラーが走らないように表示する際にnull判定して対応(blog.brand !== null ? blog.brand.brand_name : "")
      3.ブランド削除後にブログの編集画面でブランドを選択する際に未選択状態に見えるが実際はlaravelからデータはきちんと渡って来ていて、未選択の状態でフォームを送信してもrequiredのバリデーションが効いてないように見える
    
    物理削除の問題点
    ・親テーブルの削除
      1.500番代のエラー発生
      2.例外処理で削除時にきちんと分かりやすいエラー出すことで対応
      3.ブログ等に紐づけてそのブログを論理削除した場合にブラウザからは一生消せなくなる
      4.レコード自体はDBに残るがブラウザからは表示されなくなる

    検討しなければいけない点
    ・論理削除されたデータをブラウザ上で復元する機能を追加で実装するか？
    ・マスタデータの削除時に警告を出すか？
    ・親テーブルを論理削除した場合のカスケードをどうするか？ ex) オーダーを論理削除した場合にオーダーに紐づく詳細データが論理削除されてないとブラウザ上で矛盾が起こる
    ・論理削除してもいいものと物理削除していいものの精査が必要

テスト設計
  単体テスト

  結合テスト

  負荷テスト

セキュリティ設計

要件設定
  どこまでをシステム内とするのかの線引き
  業務フローを含めた設計
  今後の拡張を含めた設計
